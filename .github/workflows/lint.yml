name: Clang Format Check

on:
  pull_request:
    branches:
      - main

jobs:
  clang-format:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Install Clang Format
        run: sudo apt-get install -y clang-format

      - name: Run Clang Format
        run: |
          find ./MCB-project/Code -name "*.c" -o -name "*.cc" -o -name "*.cpp" \
          -o -name "*.h" -o -name "*.hh" -o -name "*.hpp" |
          xargs clang-format -i

      - name: Check for formatting changes
        id: git-check
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git diff --cached --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git commit -m "style: auto-format code via clang-format"
          git push origin ${{ github.head_ref }}

      - name: Report status
        if: always()  # This ensures the step runs even if previous steps fail
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
              -f state='success' \
              -f description='Clang format check passed' \
              -f context='Clang Format'
          else
            gh api \
              --method POST \
              -H "Accept: application/vnd.github+json" \
              /repos/${{ github.repository }}/statuses/${{ github.event.pull_request.head.sha }} \
              -f state='failure' \
              -f description='Clang format check failed' \
              -f context='Clang Format'
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}